<!DOCTYPE html>
<html>
<head>
<meta charset="utf8" />
<title>How to build and install nuget packages (.nupkg) from sources ?</title>
<style>
span.tab1 { margin-left:32px;}
span.tab2 { margin-left:64px;}
</style>
<!--
span.tab3 { margin-left:192px;}
span.tab4 { margin-left:256px;}
span.tab5 { margin-left:288px;}
span.tab6 { margin-left:320px;}
-->
</head>
<body><a href="https://github.com/ArsenShnurkov/gentoo-mono-handbook"><img alt="Fork me on GitHub" id="forkme" src="images/forkme.png" align="right" width="100" /></a>
<table><tr><td valign="top">
<h1>How to build and install nuget packages (.nupkg) from sources ?</h1>
</td><td valign="top">
<a href="index.htm">Gentoo Mono Handbook</a>
<br />
&nbsp;
</td></tr></table>
.nuspec manifest is used to build a package and is also stored in the package after the package is built.
<br />
<br />
<a href="https://developer.xamarin.com/guides/cross-platform/application_fundamentals/nuget_walkthrough/">How to include a NuGet package in a MonoDevelop Project</a>
<br />
&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://developer.xamarin.com/guides/cross-platform/application_fundamentals/nuget_walkthrough/">https://developer.xamarin.com/guides/cross-platform/application_fundamentals/nuget_walkthrough/</a>

<h2>Typical .nuspec file</h2>

<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;package &gt;
  &lt;metadata&gt;
    &lt;id&gt;$package_id$&lt;/id&gt;
    &lt;version&gt;$package_version$&lt;/version&gt;
    &lt;authors&gt;$package_authors$&lt;/authors&gt;
    &lt;owners&gt;$package_owners$&lt;/owners&gt;
    &lt;licenseUrl&gt;$package_licenseUrl$&lt;/licenseUrl&gt;
    &lt;projectUrl&gt;$package_ProjectUrl$&lt;/projectUrl&gt;
    &lt;iconUrl&gt;$package_iconUrl$&lt;/iconUrl&gt;
    &lt;requireLicenseAcceptance&gt;false&lt;/requireLicenseAcceptance&gt;
    &lt;description&gt;$package_description$&lt;/description&gt;
    &lt;releaseNotes&gt;$package_releaseNotes$&lt;/releaseNotes&gt;
    &lt;copyright&gt;$package_copyright$&lt;/copyright&gt;
    &lt;tags&gt;$package_tags$&lt;/tags&gt;
    &lt;!--
    &lt;dependencies&gt;
      &lt;dependency id=&quot;SampleDependency&quot; version=&quot;1.0&quot; /&gt;
    &lt;/dependencies&gt;
    --&gt;
  &lt;/metadata&gt;
  &lt;!-- the package element can include a files element that specifies files to be included in the package.
  If the files element is omitted, all files and folders that are 
  in the same folder as the .nuspec file are included in the package.
  (q) https://docs.nuget.org/create/nuspec-reference--&gt;
&lt;/package&gt;
</pre>
<h3>replacement tokens and properties</h3>
<a href="https://docs.nuget.org/ndocs/schema/nuspec">https://docs.nuget.org/ndocs/schema/nuspec</a>


<dl>
<dt>-Properties</dt>
<dd>Provides the ability to specify a semicolon ";" delimited list of properties when creating a package.</dd>
</dl>
If one set Properties twice, then nuget will give the error:
<pre>
Invalid option value: '-Properties package_version=4.1.3'
</pre>
And this is not very good, because it become more difficult to provide default values for that properties

<br />
<br />
When you build the package by using MSBuild,
the properties defined for the build propagate through to the package build as values for replacement tokens.
They will have the same names as the properties in MSBuild,
which makes it possible to select files to be included
depending on the current build configuration. For instance:
<pre>&lt;files&gt;
    &lt;file src=&quot;bin\$configuration$\$id$.pdb&quot; target=&quot;lib\net40\&quot; /&gt;
&lt;/files&gt;</pre>


<h3>How to set version</h3>

Replace specified version
<pre>
&lt;version&gt;1.0.0&lt;/version&gt;
</pre>
with replacement token:
<pre>
        &lt;version&gt;$version$&lt;/version&gt;
</pre>
specify the property through nuget command line arguments in the ebuild:
<pre>
	enuspec -Prop version=4.1.3 ./src/NuGet/NLog/NLog.nuspec
</pre>


<h2>Pack command</h2>
<a href="https://docs.nuget.org/Consume/Command-Line-Reference#pack-command">https://docs.nuget.org/Consume/Command-Line-Reference#pack-command</a>
<br />
The .nuspec file is included in the package after the package is built (but without the element that lists files if that element was included).
<br />
<br />
So, we need to copy file from ${FILESDIR} into output dir, and thus we will be able to use defaults.
<br />
<br />
or just add locations with a patch	
 	
<h2>How to create .nuspec file</h2>
 In the folder where the csproj file is, run:
<br />
nuget spec 
<br />
<pre><code>
# nuget spec SharpHsql.csproj 
Created 'SharpHsql.csproj.nuspec' successfully.
</code></pre>

The file will have following content:
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;package &gt;
  &lt;metadata&gt;
    &lt;id&gt;NLog.mono4.csproj&lt;/id&gt;
    &lt;version&gt;1.0.0&lt;/version&gt;
    &lt;authors&gt;user&lt;/authors&gt;
    &lt;owners&gt;user&lt;/owners&gt;
    &lt;licenseUrl&gt;http://LICENSE_URL_HERE_OR_DELETE_THIS_LINE&lt;/licenseUrl&gt;
    &lt;projectUrl&gt;http://PROJECT_URL_HERE_OR_DELETE_THIS_LINE&lt;/projectUrl&gt;
    &lt;iconUrl&gt;http://ICON_URL_HERE_OR_DELETE_THIS_LINE&lt;/iconUrl&gt;
    &lt;requireLicenseAcceptance&gt;false&lt;/requireLicenseAcceptance&gt;
    &lt;description&gt;Package description&lt;/description&gt;
    &lt;releaseNotes&gt;Summary of changes made in this release of the package.&lt;/releaseNotes&gt;
    &lt;copyright&gt;Copyright 2015&lt;/copyright&gt;
    &lt;tags&gt;Tag1 Tag2&lt;/tags&gt;
    &lt;dependencies&gt;
      &lt;dependency id=&quot;SampleDependency&quot; version=&quot;1.0&quot; /&gt;
    &lt;/dependencies&gt;
  &lt;/metadata&gt;
&lt;/package&gt;
</pre>




<h2>Default paths</h2>
you generate a blank nuspec file with:
<br />
nuget spec
<br />
If you use that file and then put your dlls in a folder under it named lib, it will package them up.
<br />
If you manually reference any files in the nuspec file, the conventions are not used.
<br />
you can tell nuget the location of your .\lib folder via the -BasePath command line:
<br />
build\nuget.exe pack nuget\Company.Project.nuspec -BasePath nuget\
<br />
<br />
You'll run NuGet on a single project (or nuspec file), but it supports pointers to other projects via the file element.
<br />
This element uses the names of your project's References, so you avoid having to
<br />
a) find the location of other project files, and
<br />
b) copy files to a particular place as a post-build step.
<br />
Supposing you have a nuspec file for MyLibrary.Core.csproj, and it references MyLibrary.Extensions and MyLibrary.Tests such that they end up in the bin directory after a build:
<br />
<br /><font type="tt">&lt;package xmlns=&quot;http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd&quot;&gt;<br />
<span class="tab1">&lt;metadata&gt;</span><br />
<span class="tab2">...</span><br />
<span class="tab1">&lt;/metadata&gt;</span><br />
<span class="tab1">&lt;files&gt;</span><br />
<span class="tab2">&lt;file src=&quot;bin\Release\MyLibrary.Extensions.dll&quot; target=&quot;lib\net40&quot; /&gt;</span><br />
<span class="tab2">&lt;file src=&quot;bin\Release\MyLibrary.Tests.dll&quot; target=&quot;lib\net40&quot; /&gt;</span><br />
<span class="tab1">&lt;/files&gt;</span><br />
&lt;/package&gt;</font><br />
<br />
With this setup, all of your references should end up in the appropriate place in the NuGet package.
<br />
You still have the hard-coded 'Release' in there, but I'd wager
most probably don't distribute NuGet packages of their debug builds anyway.


<h2>Debug and Release configurations</h2>
<a href="https://github.com/mrward/monodevelop-nuget-addin/issues/62">https://github.com/mrward/monodevelop-nuget-addin/issues/62</a>

</body>
</html>
